#!/usr/bin/env python

#---two parameters:the beginning number of images(default 1),the end number of image(default the last one)---#

#the number in prototype file should be ordered#

import sys
import os
from numpy import *
from PIL import Image as image

#things to modify:
#done 1. read the key points of each image advance in an array 
#done 2. implement a function that can compute bounding box using boolean key points array 
#done 3. implement the first version: modify getting bounding box of prototype from file to from function below
#	 								 add a determining condition "if head[k]" during store Coordinate of key points
#4. pre resize *
#* make the same size
#done 5. change wapping image from PIL to opencv 
#6. implement the second version:don't use reading prototype parameters,
#								 instead loop all images, find a best one whoes avarage distance error is the min one 
#7. implement the third version: loop all images and all key points, 
#								 find a best one and best M-nearest ksy points whoes avarage distance error is the min one 
#                                modify M 
#8. implement the fouth version: loop all images and all key points and store a best prototype arrays (L length) 
#								 each time, if length > L, select L best results
#								 modify lambda


def buldbox(kpoint,kfalg):
	box = [INFINITY,INFINITY,-1,-1] 

	for i in range(len(kpoint)):
		if kpoint[i][2] == 1 and kfalg[i]:
			if kpoint[i][0] < box[0]:
				box[0] = kpoint[i][0]
			if kpoint[i][0] > box[2]:
				box[2] = kpoint[i][0]
			if kpoint[i][1] < box[1]:
				box[1] = kpoint[i][1]
			if kpoint[i][1] > box[3]:
				box[3] = kpoint[i][1]

	if box[0] == INFINITY or box[1] == INFINITY or box[2] == -1 or box[3] == -1:
		box = [0,0,std_w,std_h]

	if ex_rate*(box[2]-box[0]) > ex_min:
		add_w = ex_rate*(box[2]-box[0])
	else:
		add_w = ex_min

	if ex_rate*(box[3]-box[1]) > ex_min:
		add_h = ex_rate*(box[3]-box[1])
	else:
		add_h = ex_min

	box[0] = int(box[0]-add_w)
	box[1] = int(box[1]-add_h)
	box[2] = int(box[2]+add_w)
	box[3] = int(box[3]+add_h)

	return tuple(box)

#fixed parameters
#image_root = '/Users/will/Documents/hiwi/3/images/'  #change
#keyfile =  '/Users/will/Documents/hiwi/3/part/part_locs.txt' #change
#mapfile =  '/Users/will/Documents/hiwi/3/part/images.txt' #change
#prototype = '/Users/will/Documents/hiwi/3/proto_order.txt' #change
#original = 'original/'
#normalized = 'normalization/' 
image_root = '/work/cv2/haiwang/data/CUB200-2011/images/'  #change
keyfile =  '/work/cv2/haiwang/data/CUB200-2011/parts/part_locs.txt' #change
mapfile =  '/work/cv2/haiwang/data/CUB200-2011/parts/images.txt' #change
prototype = '/work/cv2/haiwang/data/CUB200-2011/parts/proto_order.txt' #change
original = 'original/'
normalized = 'normalization/'
ex_rate = 0.5
ex_min = 5
INFINITY = 100000
std_w = 150.0
std_h = 150.0
head = (False,True,False,False,True,True,True,False,False,True,True,False,False,False,True)
#		1     2    3     4     5    6    7    8     9     10    11   12    13    14    15
K = 15 #the number of key points

#init parameters
keypoints = []
#Nt = 11788
Nt = 1000
N = 0 #the number of images
B = 1 #the beginning number of images
im_size = [] #the size of image
Ne = 0

#read image size
#imagemap = open(mapfile)
#for i in range(Nt):
#	path = imagemap.readline().split()[1]
#	classpath = path.split('/')[0]+'/'
#	im = image.open(image_root+original+path)	
#	im_size.append(im.size)

#read keypoints of each image and size of image
key = open(keyfile)
imagemap = open(mapfile)
line = key.readline()
while not line in (None,''):
        #print N
	path = imagemap.readline().split()[1]
        classpath = path.split('/')[0]+'/'
        im = image.open(image_root+original+path)
			
	im_size.append(im.size)

	#print im.size

	kpoint = []
	for i in range(K):
		kpoint.append([float(line.split()[2]),float(line.split()[3]),int(line.split()[4])])
		line = key.readline()
	#print N
	box = buldbox(kpoint,head)
	w_s = std_w/(box[2]-box[0])
	h_s = std_h/(box[3]-box[1])
	#keypoints.append(kpoint)
	for i in range(K):
		kpoint[i][0] *=w_s
		kpoint[i][1] *=h_s
	keypoints.append(((box[0]*w_s,box[1]*h_s,box[2]*w_s,box[3]*h_s),kpoint))
	N += 1
	#if N >= Nt:
	#	break

sum_err_arr = []

print N
print Nt

for l in range(Nt):
	z = random.randint(0,N-1)

	keypoints_p = [keypoints[z]]

	print z
        #z2 = random.randint(0,N-1)
        #print l,2,z2

        #keypoints_p.append(keypoints[z2])

	sum_error = 0

	for i in range(N):

		#store all parameters of each prototype for wraping 
		paras = []
		
		RE = 0

		for (box,kpoints_p) in keypoints_p:

			#print box 
			#print kpoints_p
			#print box[0],box[1],box[2],box[3]
			
			#store Coordinate of key points
			Sp = 0; Mp = []; Mp_f_lr = []; Mi = []; #Mp_f_ud = [] 
			for j in range(K):
				#print keypoints[i][1][j][2]	
				if keypoints[i][1][j][2] == 1 and kpoints_p[j][2] == 1 and kpoints_p[j][0] >= box[0] and kpoints_p[j][0] <= box[2] and kpoints_p[j][1] >= box[1] and kpoints_p[j][1] <= box[3]:
					#print j,'test:',keypoints[i][j][0],keypoints[i][j][1],'prototype:',kpoints_p[j][0]-box[0],kpoints_p[j][1]-box[1]
					Mi.append([keypoints[i][1][j][0]-im_size[i][0]/2,keypoints[i][1][j][1]-im_size[i][1]/2])
					Mp.append([kpoints_p[j][0]-box[0],kpoints_p[j][1]-box[1]])
					Mp_f_lr.append([box[2]-kpoints_p[j][0],kpoints_p[j][1]-box[1]])
					#Mp_f_ud.append([kpoints_p[j][0]-box[0],box[3]-kpoints_p[j][1]])
					Sp += 1

			paras.append((box,kpoints_p,Sp,Mp,Mi,0))
			paras.append((box,kpoints_p,Sp,Mp_f_lr,Mi,1))
		
		#select the best wraping parameters and relative wraping image	
		error_opt = -1 #means no value
		for para in paras:
			
			box,kpoints_p,Sp,Mp,Mi,reversal = para

			w_new = box[2]-box[0]
			h_new = box[3]-box[1]
			
			if (Sp < 2):		
				continue

			#calculate parameters of 2D Similarity Transformation 
			Mp = matrix(Mp).T
			Mi = matrix(Mi).T 
			up = Mp.mean(1)
			ui = Mi.mean(1)
			Mp = Mp-up
			Mi = Mi-ui

			U,S,V = linalg.svd(Mi*Mp.T)
			R = V.T*diag([1,linalg.det(V.T*U.T)])*U.T 
			s = trace(Mp.T*R*Mi)*1.0/trace(Mi.T*Mi)

			error = 0.0
			for j in range(Sp):
				error += ((s*R*Mi.T[j].T).A[0][0]-Mp.T[j].T.A[0][0])**2 + ((s*R*Mi.T[j].T).A[1][0]-Mp.T[j].T.A[1][0])**2 			
			error /= Sp

			if error_opt == -1 or error < error_opt:
				error_opt = error
				if reversal:
					RE = 1
		print error_opt, RE
		sum_error += error_opt
		Ne += 1
	sum_err_arr.append((sum_error*1.0/Ne,z,z2))

sum_err_arr.sort(key=lambda l:l[0])

#for i in range(Nt):
	#print sum_err_arr[i]
